// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AttackData))]
  public unsafe partial class AttackDataPrototype : ComponentPrototype<Quantum.AttackData> {
    public AssetRef<AttackConfig> AttackConfig;
    [ArrayLengthAttribute(4)]
    public AssetRef<SpecialMoveConfig>[] SpecialMoves = new AssetRef<SpecialMoveConfig>[4];
    partial void MaterializeUser(Frame frame, ref Quantum.AttackData result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AttackData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AttackData result, in PrototypeMaterializationContext context = default) {
        result.AttackConfig = this.AttackConfig;
        for (int i = 0, count = PrototypeValidator.CheckLength(SpecialMoves, 4, in context); i < count; ++i) {
          *result.SpecialMoves.GetPointer(i) = this.SpecialMoves[i];
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.CharacterLevel))]
  public unsafe partial class CharacterLevelPrototype : ComponentPrototype<Quantum.CharacterLevel> {
    public Int32 CurrentLevel;
    partial void MaterializeUser(Frame frame, ref Quantum.CharacterLevel result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.CharacterLevel component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.CharacterLevel result, in PrototypeMaterializationContext context = default) {
        result.CurrentLevel = this.CurrentLevel;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.CharacterStatus))]
  public unsafe partial class CharacterStatusPrototype : ComponentPrototype<Quantum.CharacterStatus> {
    public AssetRef<StatusData> StatusData;
    public FP CurrentHealth;
    public QBoolean IsDead;
    public Quantum.Prototypes.FrameTimerPrototype RespawnTimer;
    public Quantum.Prototypes.FrameTimerPrototype RegenTimer;
    public Quantum.Prototypes.FrameTimerPrototype InvincibleTimer;
    public Quantum.Prototypes.FrameTimerPrototype DisconnectedTimer;
    partial void MaterializeUser(Frame frame, ref Quantum.CharacterStatus result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.CharacterStatus component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.CharacterStatus result, in PrototypeMaterializationContext context = default) {
        result.StatusData = this.StatusData;
        result.CurrentHealth = this.CurrentHealth;
        result.IsDead = this.IsDead;
        this.RespawnTimer.Materialize(frame, ref result.RespawnTimer, in context);
        this.RegenTimer.Materialize(frame, ref result.RegenTimer, in context);
        this.InvincibleTimer.Materialize(frame, ref result.InvincibleTimer, in context);
        this.DisconnectedTimer.Materialize(frame, ref result.DisconnectedTimer, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.CommandInputData))]
  public unsafe partial class CommandInputDataPrototype : ComponentPrototype<Quantum.CommandInputData> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.CommandInputData result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.CommandInputData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.CommandInputData result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.CountdownTimer))]
  public unsafe partial class CountdownTimerPrototype : StructPrototype {
    public FP TimeLeft;
    public FP StartTime;
    partial void MaterializeUser(Frame frame, ref Quantum.CountdownTimer result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.CountdownTimer result, in PrototypeMaterializationContext context = default) {
        result.TimeLeft = this.TimeLeft;
        result.StartTime = this.StartTime;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public Button _left;
    public Button _right;
    public Button _up;
    public Button _down;
    public Button _a;
    public Button _b;
    public Button _c;
    public Button _d;
    public Button _l1;
    public Button _r1;
    public Button _select;
    public Button _start;
    public Byte _analogRightTrigger;
    public Byte _analogLeftTrigger;
    public Quantum.Prototypes.QuantumThumbSticksPrototype ThumbSticks;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result._left = this._left;
        result._right = this._right;
        result._up = this._up;
        result._down = this._down;
        result._a = this._a;
        result._b = this._b;
        result._c = this._c;
        result._d = this._d;
        result._l1 = this._l1;
        result._r1 = this._r1;
        result._select = this._select;
        result._start = this._start;
        result._analogRightTrigger = this._analogRightTrigger;
        result._analogLeftTrigger = this._analogLeftTrigger;
        this.ThumbSticks.Materialize(frame, ref result.ThumbSticks, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.KCC2D))]
  public unsafe partial class KCC2DPrototype : ComponentPrototype<Quantum.KCC2D> {
    public AssetRef<KCC2DConfig> Config;
    partial void MaterializeUser(Frame frame, ref Quantum.KCC2D result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.KCC2D component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.KCC2D result, in PrototypeMaterializationContext context = default) {
        result.Config = this.Config;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.KCC2DSettings))]
  public unsafe partial class KCC2DSettingsPrototype : StructPrototype {
    public FP CapsuleRadius;
    public FP CapsuleHeight;
    public FPVector2 Offset;
    public LayerMask Mask;
    [Space(10)]
    public Int32 SolverIterations;
    [RangeEx(0, 1)]
    public FP IterationCorrectionRate;
    [RangeEx(0, 1)]
    public FP AllowedPenetration;
    public QBoolean CCD;
    [RangeEx(4, 60)]
    public FP Acceleration;
    [RangeEx(1, 10)]
    public FP FlipDirectionMultiplier;
    [RangeEx(4, 60)]
    public FP Deceleration;
    [RangeEx(1, 10)]
    public FP MaxBaseSpeed;
    [Space(5)]
    public Quantum.QEnum32<DashDirection> DirectionType;
    public QBoolean DashSuspendsGravity;
    [RangeEx(0, 1)]
    public FP DashDuration;
    [RangeEx(5, 20)]
    public FP MaxDashSpeed;
    [Space(5)]
    public FP BaseGravity;
    [RangeEx(1, 4)]
    public FP DownGravityMultiplier;
    public FP MaxSlopeAngle;
    [RangeEx(4, 25)]
    public FP SlopeMaxSpeed;
    [RangeEx(10, 100)]
    public FP FreeFallMaxSpeed;
    [Space(5)]
    public FP JumpImpulse;
    public FP DoubleJumpImpulse;
    [RangeEx(0, 1)]
    public FP AirControlFactor;
    public QBoolean FastFlipOnAir;
    public QBoolean DownGravityOnRelease;
    [RangeEx(0, 1)]
    public FP CoyoteTime;
    [RangeEx(0, 1)]
    public FP InputBufferTime;
    public QBoolean DoubleJumpEnabled;
    public QBoolean DoubleJumpWhenFreeFalling;
    [RangeEx(0, 10)]
    public FP DecelerationOnAir;
    [Space(5)]
    public QBoolean WallJumpEnabled;
    public QBoolean RequiresOppositeInput;
    [RangeEx(0, 1)]
    public FP WalledStateExtention;
    public FP MinWallAngle;
    public FP MaxWallAngle;
    public FPVector2 WallJumpImpulse;
    [RangeEx(1, 10)]
    public FP WallMaxSpeed;
    partial void MaterializeUser(Frame frame, ref Quantum.KCC2DSettings result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.KCC2DSettings result, in PrototypeMaterializationContext context = default) {
        result.CapsuleRadius = this.CapsuleRadius;
        result.CapsuleHeight = this.CapsuleHeight;
        result.Offset = this.Offset;
        result.Mask = this.Mask;
        result.SolverIterations = this.SolverIterations;
        result.IterationCorrectionRate = this.IterationCorrectionRate;
        result.AllowedPenetration = this.AllowedPenetration;
        result.CCD = this.CCD;
        result.Acceleration = this.Acceleration;
        result.FlipDirectionMultiplier = this.FlipDirectionMultiplier;
        result.Deceleration = this.Deceleration;
        result.MaxBaseSpeed = this.MaxBaseSpeed;
        result.DirectionType = this.DirectionType;
        result.DashSuspendsGravity = this.DashSuspendsGravity;
        result.DashDuration = this.DashDuration;
        result.MaxDashSpeed = this.MaxDashSpeed;
        result.BaseGravity = this.BaseGravity;
        result.DownGravityMultiplier = this.DownGravityMultiplier;
        result.MaxSlopeAngle = this.MaxSlopeAngle;
        result.SlopeMaxSpeed = this.SlopeMaxSpeed;
        result.FreeFallMaxSpeed = this.FreeFallMaxSpeed;
        result.JumpImpulse = this.JumpImpulse;
        result.DoubleJumpImpulse = this.DoubleJumpImpulse;
        result.AirControlFactor = this.AirControlFactor;
        result.FastFlipOnAir = this.FastFlipOnAir;
        result.DownGravityOnRelease = this.DownGravityOnRelease;
        result.CoyoteTime = this.CoyoteTime;
        result.InputBufferTime = this.InputBufferTime;
        result.DoubleJumpEnabled = this.DoubleJumpEnabled;
        result.DoubleJumpWhenFreeFalling = this.DoubleJumpWhenFreeFalling;
        result.DecelerationOnAir = this.DecelerationOnAir;
        result.WallJumpEnabled = this.WallJumpEnabled;
        result.RequiresOppositeInput = this.RequiresOppositeInput;
        result.WalledStateExtention = this.WalledStateExtention;
        result.MinWallAngle = this.MinWallAngle;
        result.MaxWallAngle = this.MaxWallAngle;
        result.WallJumpImpulse = this.WallJumpImpulse;
        result.WallMaxSpeed = this.WallMaxSpeed;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.KCCQueryResult))]
  public unsafe partial class KCCQueryResultPrototype : StructPrototype {
    public FPVector2 SurfaceTangent;
    public FP ContactAngle;
    public QBoolean Overlapping;
    public QBoolean Ignore;
    public Hit Contact;
    public Quantum.QEnum32<KCCContactType> ContactType;
    partial void MaterializeUser(Frame frame, ref Quantum.KCCQueryResult result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.KCCQueryResult result, in PrototypeMaterializationContext context = default) {
        result.SurfaceTangent = this.SurfaceTangent;
        result.ContactAngle = this.ContactAngle;
        result.Overlapping = this.Overlapping;
        result.Ignore = this.Ignore;
        result.Contact = this.Contact;
        result.ContactType = this.ContactType;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.MovementData))]
  public unsafe partial class MovementDataPrototype : ComponentPrototype<Quantum.MovementData> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.MovementData result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.MovementData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.MovementData result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe partial class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerSpawner))]
  public unsafe partial class PlayerSpawnerPrototype : ComponentPrototype<Quantum.PlayerSpawner> {
    public PlayerRef PlayerRef;
    public Quantum.QEnum32<CharacterTeam> PlayerTeam;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerSpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerSpawner component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerSpawner result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        result.PlayerTeam = this.PlayerTeam;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumHighresThumbSticks))]
  public unsafe partial class QuantumHighresThumbSticksPrototype : StructPrototype {
    public Byte _leftThumbAngle;
    public Byte _leftThumbMagnitude;
    public Int16 _rightThumbX;
    public Int16 _rightThumbY;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumHighresThumbSticks result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumHighresThumbSticks result, in PrototypeMaterializationContext context = default) {
        result._leftThumbAngle = this._leftThumbAngle;
        result._leftThumbMagnitude = this._leftThumbMagnitude;
        result._rightThumbX = this._rightThumbX;
        result._rightThumbY = this._rightThumbY;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumRegularThumbSticks))]
  public unsafe partial class QuantumRegularThumbSticksPrototype : StructPrototype {
    public Byte _leftThumbAngle;
    public Byte _leftThumbMagnitude;
    public Byte _rightThumbAngle;
    public Byte _rightThumbMagnitude;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumRegularThumbSticks result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumRegularThumbSticks result, in PrototypeMaterializationContext context = default) {
        result._leftThumbAngle = this._leftThumbAngle;
        result._leftThumbMagnitude = this._leftThumbMagnitude;
        result._rightThumbAngle = this._rightThumbAngle;
        result._rightThumbMagnitude = this._rightThumbMagnitude;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumThumbSticks))]
  public unsafe partial class QuantumThumbSticksPrototype : UnionPrototype {
    public string _field_used_;
    public Quantum.Prototypes.QuantumRegularThumbSticksPrototype Regular;
    public Quantum.Prototypes.QuantumHighresThumbSticksPrototype HighRes;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumThumbSticks result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumThumbSticks result, in PrototypeMaterializationContext context = default) {
        switch (_field_used_) {
          case "REGULAR": this.Regular.Materialize(frame, ref *result.Regular, in context); break;
          case "HIGHRES": this.HighRes.Materialize(frame, ref *result.HighRes, in context); break;
          case "": case null: break;
          default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SimpleInput2D))]
  public unsafe partial class SimpleInput2DPrototype : StructPrototype {
    public FPVector2 AimDirection;
    public Button Left;
    public Button Right;
    public Button Up;
    public Button Down;
    public Button Jump;
    public Button Dash;
    public Button LP;
    public Button HP;
    public Button Use;
    partial void MaterializeUser(Frame frame, ref Quantum.SimpleInput2D result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.SimpleInput2D result, in PrototypeMaterializationContext context = default) {
        result.AimDirection = this.AimDirection;
        result.Left = this.Left;
        result.Right = this.Right;
        result.Up = this.Up;
        result.Down = this.Down;
        result.Jump = this.Jump;
        result.Dash = this.Dash;
        result.LP = this.LP;
        result.HP = this.HP;
        result.Use = this.Use;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SpecialMove))]
  public unsafe partial class SpecialMovePrototype : StructPrototype {
    [ArrayLengthAttribute(8)]
    public Int32[] InputSequence = new Int32[8];
    public Int32 SequenceLength;
    public Int32 MoveId;
    public FP Damage;
    partial void MaterializeUser(Frame frame, ref Quantum.SpecialMove result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.SpecialMove result, in PrototypeMaterializationContext context = default) {
        for (int i = 0, count = PrototypeValidator.CheckLength(InputSequence, 8, in context); i < count; ++i) {
          result.InputSequence[i] = this.InputSequence[i];
        }
        result.SequenceLength = this.SequenceLength;
        result.MoveId = this.MoveId;
        result.Damage = this.Damage;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
